<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CaptainCoder.Core</name>
    </assembly>
    <members>
        <member name="T:CaptainCoder.Core.Collections.ReadOnlySet`1">
            <summary>
            A read only view of a set.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Instantiates a view of the given set.
            </summary>
            <param name="set"></param>
        </member>
        <member name="P:CaptainCoder.Core.Collections.ReadOnlySet`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:CaptainCoder.Core.Collections.ReadOnlySet`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>    
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.Remove(`0)">
            <inheritdoc/>  
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.System#Collections#Generic#ISet{T}#Add(`0)">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Collections.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            This method is not supported.
            </summary>
        </member>
        <member name="T:CaptainCoder.Core.DictionaryExtensions">
            <summary></summary>
        </member>
        <member name="M:CaptainCoder.Core.DictionaryExtensions.KeyValuePairEquals``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Performs a deep comparison of all key value pairs in <paramref name="dict0"/> and <paramref name="dict1"/>.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.DictionaryExtensions.ToTuples``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Generates an enumerable of tuples containing each key value pair in the dictionary
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.DictionaryExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>
            Given an enumerable of key values, creates a dictionary. If a duplicate key is found
            this method throws an exception.
            </summary>
        </member>
        <member name="T:CaptainCoder.Core.SetExtensionMethods">
            <summary> </summary>
        </member>
        <member name="M:CaptainCoder.Core.SetExtensionMethods.AsReadOnly``1(System.Collections.Generic.ISet{``0})">
            <summary>
            Creates and returns a readonly view of the specified <paramref name="set"/>
            </summary>
        </member>
        <member name="T:CaptainCoder.Core.MutablePosition">
            <summary>
            A discrete mutable position defined by a row and column. For convenience,
            this struct can be implicitly cast to a <see cref="T:CaptainCoder.Core.Position"/>.
            </summary>
        </member>
        <member name="F:CaptainCoder.Core.MutablePosition.Row">
            <summary></summary>
        </member>
        <member name="F:CaptainCoder.Core.MutablePosition.Col">
            <summary></summary>
        </member>
        <member name="M:CaptainCoder.Core.MutablePosition.Freeze">
            <summary>
            Freezes this struct into an immutable <see cref="T:CaptainCoder.Core.Position"/>
            </summary>
        </member>
        <member name="T:CaptainCoder.Core.Position">
            <summary>
            A discrete readonly position defined by a row and column. For convenience,
            this struct supports an implicit cast from (int, int) tuples and the <see
            cref="T:CaptainCoder.Core.MutablePosition"/> struct.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            A discrete readonly position defined by a row and column. For convenience,
            this struct supports an implicit cast from (int, int) tuples and the <see
            cref="T:CaptainCoder.Core.MutablePosition"/> struct.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~CaptainCoder.Core.Position">
            <summary>
            Allows (int, int) tuples to be used anywhere a Position can be used. Be careful not to 
            do this when using a position as a key in a HashSet or Dictionary.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.op_Implicit(CaptainCoder.Core.MutablePosition)~CaptainCoder.Core.Position">
            <summary>
            Allows MutablePosition to be used anywhere a Position could be used.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.op_Addition(CaptainCoder.Core.Position,CaptainCoder.Core.Position)">
            <summary>
            Sums the row and column values together
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.op_Subtraction(CaptainCoder.Core.Position,CaptainCoder.Core.Position)">
            <summary>
            Calculates the simple difference in row and column values
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.Min(CaptainCoder.Core.Position,CaptainCoder.Core.Position)">
            <summary>
            Takes the smaller row and column of each position. For example: Position.Min((0, 5), (-1, 6)) => (-1, 5);
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.Max(CaptainCoder.Core.Position,CaptainCoder.Core.Position)">
            <summary>
            Takes the larger row and column of each position. For example: Position.Max((0, 5), (-1, 6)) => (0, 6);
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.Min(System.Collections.Generic.IEnumerable{CaptainCoder.Core.Position})">
            <summary>
            Finds the smallest row and column of all position.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.Max(System.Collections.Generic.IEnumerable{CaptainCoder.Core.Position})">
            <summary>
            Finds the largest row and column of all positions
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.FindMinMax(System.ValueTuple{CaptainCoder.Core.Position,CaptainCoder.Core.Position},System.Collections.Generic.IEnumerable{CaptainCoder.Core.Position})">
            <summary>
            Finds both the min and max position from all provided positions
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.Position.FindMinMax(System.Collections.Generic.IEnumerable{CaptainCoder.Core.Position}[])">
            <summary>
            Finds both the min and max position from all provided positions
            </summary>
        </member>
        <member name="T:CaptainCoder.Core.PositionExtensions">
            <summary></summary>
        </member>
        <member name="M:CaptainCoder.Core.PositionExtensions.Freeze(System.Collections.Generic.IEnumerable{CaptainCoder.Core.MutablePosition})">
            <summary>
            Copies an IEnumberable of <see cref="T:CaptainCoder.Core.MutablePosition"/>s and freezes them as readonly <see cref="T:CaptainCoder.Core.Position"/>s.
            </summary>
        </member>
        <member name="T:CaptainCoder.Core.BagGenerator`1">
            <summary>
            A <see cref="T:CaptainCoder.Core.BagGenerator`1"/> is a generator produces a sequence of elements by randomly selecting elements
            from a bag until the bag is empty. Once the bag is empty, it is refilled with the contents of the original bag
            and reshuffled.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.BagGenerator`1.#ctor(CaptainCoder.Core.IRandom,System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates a <see cref="T:CaptainCoder.Core.BagGenerator`1"/> specifying the source of randomness, the elements to put in the bag, and
            the number of copies of each element to put in the bag.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.BagGenerator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Creates a <see cref="T:CaptainCoder.Core.BagGenerator`1"/> specifying the elements to put in the bag, and
            the number of copies of each element to put in the bag.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.BagGenerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a <see cref="T:CaptainCoder.Core.BagGenerator`1"/> specifying the elements to put in the bag.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.BagGenerator`1.Next">
            <inheritdoc/>
        </member>
        <member name="T:CaptainCoder.Core.IGenerator`1">
            <summary>
            An <see cref="T:CaptainCoder.Core.IGenerator`1"/> is capable of infinitely producing elements of a specified type.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.IGenerator`1.Next">
            <summary>
            Returns the next element in the generator.
            </summary>
        </member>
        <member name="T:CaptainCoder.Core.IGeneratorExtensions">
            <summary>
            Provides helper methods for the IGenerator interface
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.IGeneratorExtensions.Stream``1(CaptainCoder.Core.IGenerator{``0})">
            <summary>
            Generates an infinite stream of elements.
            </summary>
        </member>
        <member name="T:CaptainCoder.Core.IRandom">
            <summary>
            A simple interface to wrap random number generators.
            </summary>
        </member>
        <member name="P:CaptainCoder.Core.IRandom.Shared">
            <summary>
            Returns a shared instance for generating numbers.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.IRandom.Instantiate">
            <summary>
            Instantiates a new default instance.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.IRandom.Instantiate(System.Int32)">
            <summary>
            Instantiates a new default instance specifying the initial seed.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.IRandom.Next">
            <summary>
            Returns a non-negative random integer.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.IRandom.Next(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.IRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
        </member>
        <member name="M:CaptainCoder.Core.IRandom.NextDouble">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0,
            and less than 1.0.
            </summary>
        </member>
    </members>
</doc>
